import { TestBed, ComponentFixture } from '@angular/core/testing';
import { RouterTestingModule } from '@angular/router/testing';
import { Router, NavigationStart, NavigationEnd, NavigationCancel, NavigationError, RouterEvent } from '@angular/router';
import { AppComponent } from './app.component';
import { Subscription } from 'rxjs';

describe('AppComponent', () => {
  let component: AppComponent;
  let fixture: ComponentFixture<AppComponent>;
  let router: Router;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [AppComponent],
      imports: [RouterTestingModule]
    }).compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(AppComponent);
    component = fixture.componentInstance;
    router = TestBed.inject(Router);
    fixture.detectChanges();
  });

  afterEach(() => {
    fixture.destroy();
  });

  it('should create the app', () => {
    expect(component).toBeTruthy();
  });

  it('should handle navigation events correctly', () => {
    const navigationStartEvent = new NavigationStart(1, '/');
    const navigationEndEvent = new NavigationEnd(2, '/', '/');
    const navigationCancelEvent = new NavigationCancel(3, '/', '/');
    const navigationErrorEvent = new NavigationError(4, '/', 'Error');

    const events: RouterEvent[] = [
      navigationStartEvent,
      navigationEndEvent,
      navigationCancelEvent,
      navigationErrorEvent
    ];

    spyOn(router.events, 'subscribe').and.callFake((callback: (event: RouterEvent) => void) => {
      for (const event of events) {
        callback(event);
      }
    });

    spyOn(component, 'navigate');

    fixture.detectChanges();

    expect(component.navigate).toHaveBeenCalledTimes(4);
    expect(component.navigate).toHaveBeenCalledWith(navigationStartEvent);
    expect(component.navigate).toHaveBeenCalledWith(navigationEndEvent);
    expect(component.navigate).toHaveBeenCalledWith(navigationCancelEvent);
    expect(component.navigate).toHaveBeenCalledWith(navigationErrorEvent);
  });

  it('should handle navigationStart event correctly', () => {
    const event = new NavigationStart(1, '/');
    component.navigate(event);
    // Assert your expected behavior for NavigationStart event
  });

  it('should handle navigationEnd event correctly', () => {
    const event = new NavigationEnd(1, '/', '/');
    component.navigate(event);
    // Assert your expected behavior for NavigationEnd event
  });

  it('should handle navigationCancel event correctly', () => {
    const event = new NavigationCancel(1, '/', '/');
    component.navigate(event);
    // Assert your expected behavior for NavigationCancel event
  });

  it('should handle navigationError event correctly', () => {
    const event = new NavigationError(1, '/', 'Error');
    component.navigate(event);
    // Assert your expected behavior for NavigationError event
  });
});
